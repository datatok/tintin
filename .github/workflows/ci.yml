name: Continuous integration

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  app-test:
    name: test
    runs-on: ubuntu-latest
    env:
      GO111MODULE: "on"
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Checkout code into the Go module directory
        uses: actions/checkout@v2

      - name: Run golangci-lint
        env:
          BUILD_TAGS: e2e
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/bin/ v1.39.0
          make test-unit

  app-build:
    name: Build app
    runs-on: ubuntu-latest
    needs: app-test
    
    env:
      GO111MODULE: "on"
    
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Checkout code into the Go module directory
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}

      # Ensure we don't discover cross platform build issues at release time.
      # Time used to build linux here is gained back in the build for local E2E step
      - name: Build packages
        run: make build-cross

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          retention-days: 1
          path: _dist/

  docker-build:
    name: Package app as Docker image
    runs-on: ubuntu-latest
    needs: app-build
    
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: datatok/tintin

    steps:
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - uses: actions/checkout@v2

      - name: Download dist artifact
        uses: actions/download-artifact@v2
        id: distArtifacts
        with:
          name: dist
          path: _dist

      - run: chmod +x /usr/local/bin/tintin

      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
      